class AlertWindow extends Window

	property String readOnly allowsNil thing = "default value"
	default aNumber = 0x10c + 20 -- change the default value of a super
	default aBoolean = true -- change the default value of a super
	default aString = "hello there" .. " concated!" -- change the default value of a super
	.. "oh but there's more!"
	-- default subtitle = "overriding default value" -- change the default value of a super
	default animal = Cat( "Fluffles" ) -- change the default value of a super
	property Button link okayButton -- always use the interface name as the identifier, it can't have a default value
	property {String = Number} stringTable

	static property String thingy -- static must be the first keyword

	set thing( thing )
		-- a setter. here you must manually set the value yourself (i.e. if you don't change it it will stay as-is)
		name = string.upper( name )
		self.name = name
	end

	get thing()
		-- a setter. here you must manually set the value yourself (i.e. if you don't change it it will stay as-is)
		name = string.upper( name )
		self.name = name
	end

	didSet thing( thing )
		-- the 'name' value has just been changed
		log( "Name set to " .. name )
	end

	static set thingy( thingy )
		-- a setter. here you must manually set the value yourself (i.e. if you don't change it it will stay as-is)
		thingy = string.upper( thingy )
		self.thingy = thingy
	end

	-- event handles do override each other if their name and phase is the same
	event clearApperance( ReadyInterfaceEvent.AFTER event )

	end

	event explode( ReadyInterfaceEvent event )
		print("do stuff")
	end

	function String allowsNil, Number capitaliseAndLocation( String message, String title = "Alert", Function allowsNil callback, {String} buttons = { "Okay" }, {String = Number} defaultButton = 1 )
		local location = name:find( "o" )
		return name:upper(), location
	end 

		-- if no type is given then it can be any type (use nil if you want to return nothing)
	static function display( message )

	end

end
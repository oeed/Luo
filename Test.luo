ONE, TWO, THREE = "1", "2", "3"

interface IThingy

	enum Number numbers

	property Boolean calledInitialise
	property Number initialiseArgsCount
	property String aSetter
	property String aGetter

	function String aFunction(String first, String second, third)
end

class Basic implements IThingy

	enum Number numbers = {
		ONE = 1,
		TWO = 2,
		THREE = 3
	}

	property Boolean calledInitialise = false
	property Number initialiseArgsCount
	property String aSetter = "go away"
	property String aGetter = "GO AWAY"
	property String allowsNil aNilable = "hello"
	property String aNonNilable = "hello"
	property Number aNumber = 0
	property String anInvalidGetter = "GO AWAY"

	property String aDefault = "this is a default value"
	property String aPlainValue = "hello"

	property {String} allowsNil stringTable
	property { String = Number } allowsNil stringNumberTable

	set aSetter(aSetter)
		self.aSetter = aSetter:upper()
	end

	get aGetter()
		return self.aGetter:lower()
	end

	get anInvalidGetter()
		return 42
	end

	function String aFunction(String first, String second, third, fourth)
		return first .. second .. third
	end

	function String aDefaultFunction(String first = ONE, String second = "2", third = THREE)
		return first .. second .. third
	end

	function String aSuperFunction(String first, String second, third)
		return first .. second .. tostring(third)
	end

	function Number, String, Boolean wrongReturnType()
		return "Hello", false, 6
	end

	function Number, ... varArgReturn()
		return 6, "hello", "wow", 6346
	end

	function func()
		if true then
			return "one", two, 3
		end
		return "wow"
	end

	function initialise(...)
		self.calledInitialise = true
		self.initialiseArgsCount = #{...}
	end

end

class Child extends Basic
	
	default aDefault = "a new default"

	get aGetter()
		return super()
	end

	function String aSuperFunction(String first)
		return super(first:upper(), "extra", 7)
	end

end

class InvalidDefault
	
	property Number aBadDefault = "nope"

end
dofile("compile")
dofile("output.lua")
dofile("test")
print("\n")


local basic = Basic("hola", "aamigo", 3454)
testM("Instance Initialised & __tostring", tostring(basic), "instance of 'Basic': 0x%x+")
testV("Instance Initialise Called", basic.calledInitialise, true)
testV("Instance Initialise Arguments", basic.initialiseArgsCount, 3)

testV("Instance Default Value", basic.aDefault, "this is a default value")
testF("Instance Value Getting & Setting", function() basic.aPlainValue = "Well, well, well!" return basic.aPlainValue end, "Well, well, well!")
testF("Instance Setters", function() basic.aSetter = "Hello there!" return basic.aSetter end, "HELLO THERE!")
testF("Instance Getters", function() basic.aGetter = "HELLO THERE!" return basic.aGetter end, "hello there!")
testV("Instance Functions", basic:aFunction("one", "two"), "onetwo")

local child = Child("well", "hello", 42)
testM("Subclass Initialised & __tostring", tostring(child), "instance of 'Child': 0x%x+")
testV("Subclass Initialise Called", child.calledInitialise, true)
testV("Subclass Initialise Arguments", child.initialiseArgsCount, 3)

testV("Subclass Overidden Defined Default Value", child.aDefault, "a new default")
testF("Subclass Value Getting & Setting", function() child.aPlainValue = "Well, well, well!" return child.aPlainValue end, "Well, well, well!")
testF("Subclass Super-only Defined Setters", function() child.aSetter = "Hello there!" return child.aSetter end, "HELLO THERE!")
testF("Subclass Super-and-sub Defined Getters", function() child.aGetter = "HELLO THERE!" return child.aGetter end, "hello there!")
testV("Subclass Super-only Defined Functions", child:aFunction("one", "two"), "onetwo")

testsDone()
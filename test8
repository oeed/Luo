dofile("compile")
dofile("output.lua")
dofile("test")
print("\n")

-- enums
testM("Enum Access", tostring(Basic.numbers), "enum 'Basic.numbers': 0x%x+")
testV("Enum Indexing", Basic.numbers.TWO, 2)
testFM("Enum Value Add Prevention", function()return pcall(function()Basic.numbers.FOUR = 4 end)end, false, ".+:%d+: attempted to mutate enum 'enum 'Basic.numbers': 0x%x+' key 'FOUR' to '4'")

-- basic instance tests
local basic = Basic("hola", "aamigo", 3454)
testM("Instance Initialised & __tostring", tostring(basic), "instance of 'Basic': 0x%x+")
testV("Instance Initialise Called", basic.calledInitialise, true)
testV("Instance Initialise Arguments", basic.initialiseArgsCount, 3)
testV("Instance Default Value", basic.aDefault, "this is a default value")
testFV("Instance Value Getting & Setting", function() basic.aPlainValue = "Well, well, well!" return basic.aPlainValue end, "Well, well, well!")
testFV("Instance Setters", function() basic.aSetter = "Hello there!" return basic.aSetter end, "HELLO THERE!")
testFV("Instance Getters", function() basic.aGetter = "HELLO THERE!" return basic.aGetter end, "hello there!")
testV("Instance Functions", basic:aFunction("one", "two","three"), "onetwothree")
testFM("Instance Invalid Value Catching", function()return pcall(function()basic.aPlainValue = 5 end)end, false, ".+:%d+: attempted to set property 'aPlainValue' of 'instance of 'Basic': 0x%x+' to an invalid value '5', expected type 'String'")
testFM("Instance Invalid Value Catching w. Setter", function()return pcall(function()basic.aSetter = 5 end)end, false, ".+:%d+: attempted to set property 'aSetter' of 'instance of 'Basic': 0x%x+' to an invalid value '5', expected type 'String'")
testFV("Instance nil Value For allowsNil", function()return pcall(function()basic.aNilable = nil end)end, true)
testFM("Instance nil Value For non-allowsNil", function()return pcall(function()basic.aNonNilable = nil end)end, false, ".+:%d+: attempted to set property 'aNonNilable' of 'instance of 'Basic': 0x%x+' to an invalid value 'nil', expected type 'String'")
testFM("Instance Invalid Getter Return Catching", function()return pcall(function()local v = basic.anInvalidGetter end)end, false, ".+:%d+: return value from getter 'anInvalidGetter' of 'instance of 'Basic': 0x%x+' was an invalid value '42', expected type 'String'")
testFM("Instance Invalid Array Type Catching", function()return pcall(function()basic.stringTable = {"one", 2, "three"} end)end, false, ".+:%d+: attempted to set property 'stringTable' of 'instance of 'Basic': 0x%x+' to an invalid value 'table: 0x%x+', expected type '{String} %(allowsNil%)'")
testFM("Instance Invalid Dictionary Type Catching", function()return pcall(function()basic.stringNumberTable = {["one"] = 1, [2] = 2, ["three"] = 3} end)end, false, ".+:%d+: attempted to set property 'stringNumberTable' of 'instance of 'Basic': 0x%x+' to an invalid value 'table: 0x%x+', expected type '{String=Number} %(allowsNil%)'")
testFM("Instance Invalid Enum Type Catching", function()return pcall(function()basic.number = 4 end)end, false, ".+:%d+: attempted to set property 'number' of 'instance of 'Basic': 0x%x+' to an invalid value '4', expected type 'Basic.numbers'")
testV("Instance Function Default Values", basic:aDefaultFunction(), "123")
testFM("Instance Return Type Catching", function()return pcall(function()basic:wrongReturnType() end)end, false, ".+:%d+: return value 1 from function 'wrongReturnType' of 'instance of 'Basic': 0x%x+' was an invalid value 'Hello', expected type 'Number'")


-- super class testing
local child = Child("well", "hello", 42)
testM("Subclass Initialised & __tostring", tostring(child), "instance of 'Child': 0x%x+")
testV("Subclass Initialise Called", child.calledInitialise, true)
testV("Subclass Initialise Arguments", child.initialiseArgsCount, 3)
testV("Subclass Overidden Defined Default Value", child.aDefault, "a new default")
testFV("Subclass Value Getting & Setting", function() child.aPlainValue = "Well, well, well!" return child.aPlainValue end, "Well, well, well!")
testFV("Subclass Super-only Defined Setters", function() child.aSetter = "Hello there!" return child.aSetter end, "HELLO THERE!")
testFV("Subclass Super-and-sub Defined Getters", function() child.aGetter = "HELLO THERE!" return child.aGetter end, "hello there!")
testV("Subclass Super-only Defined Functions", child:aFunction("one", "two", "three"), "onetwothree")
testV("Subclass Both-and-sub Defined Functions", child:aSuperFunction("this"), "THISextra7")
testM("Interface __tostring", tostring(IThingy), "interface 'IThingy': 0x%x+")

-- bad default value testing
testFM("Invalid Default Value Catching", function()return pcall(function()InvalidDefault() end)end, false, ".+:%d+: default value of property 'aBadDefault' of 'instance of 'InvalidDefault': 0x%x+' was an invalid value 'nope', expected type 'Number'")

testV("TypeOf Class Checking", typeOf(child, Child), true)
testV("TypeOf Super-Class Checking", typeOf(child, Basic), true)
testV("TypeOf Unrelated Class Checking", typeOf(basic, Child), false)
testV("TypeOf Implemented Interface Checking", typeOf(basic, IThingy), true)
testV("TypeOf Super-Implemented Interface Checking", typeOf(child, IThingy), true)
testV("Error Line Number Redirection", pcall(function()catchErrors(function()basic:crash()end)end), false, "Test.luo:79:attempt to perform arithmetic on a string value")

testsDone()

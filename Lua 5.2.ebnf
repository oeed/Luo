Chunk ::= (TopStatement)*

Block ::= (Statement)* (LastStatement)?

TopStatement ::=
  Class |
  Protocol |
  Enum |
  Statement

Statement ::=  ";" |
  VariableList "=" ExpressionList |
  FunctionCall |
  Label | 
  "break" | 
  "goto" Name | 
  "do" Block "end" |
  "while" Expression "do" Block "end" |
  "repeat" Block "until" Expression |
  "if" Expression "then" Block
    ("elseif" Expression "then" Block)*
    ("else" Block)? "end" |
  "for" Name "=" Expression "," Expression ("," Expression)?
    "do" Block "end" |
  "for" NameList "in" ExpressionList
    "do" Block "end" |
  "function" FunctionName FunctionBody |
  "local" "function" Name FunctionBody |
  "local" NameList ("=" ExpressionList)?

LastStatement ::= "return" (ExpressionList)?

Label ::= "::" Name "::"

Type ::= (Name ("." Name)? | "[" Type "]" | "[" Type ":" Type "]") ("?")?

FunctionName ::= Name ("." Name)* (":" Name)?

VariableList ::= VariableAssignment ("," VariableAssignment)*

VariableAssignment ::=  TypedName |
  PrefixExpression "[" Expression "]" |
  PrefixExpression "." Name

Variable ::=  Name |
  PrefixExpression "[" Expression "]" |
  PrefixExpression "." Name

TypedName ::= Name (":" Type)?

NameList ::= TypedName ("," TypedName)*

ExpressionList ::= Expression (Expression ",")*

Expression ::=  "nil" | "false" | "true" |
  Number | String | "..." | Function |
  PrefixExpression | TableConstructor |
  Expression BinaryOperator Expression |
  PreUnaryOperator Expression |
  Expression PostUnaryOperator |
  Expression "is" Type

PrefixExpression ::= Variable |
  FunctionCall |
  "(" Expression ")"

FunctionCall ::= PrefixExpression Arguments |
  PrefixExpression ":" Name Arguments

Argument ::= (Name ":")? Expression

ArgumentList ::= Argument ("," Argument)*

Arguments ::=  "(" (ArgumentList)? ")" |
  TableConstructor | String

Function ::= "function" FunctionBody

ReturnType ::= ":" Type ("," Type)*

Parameter ::= (Name)? TypedName ("=" Expression)?

ParameterList ::= Parameter ("," Parameter)* ("," "...")? | "..."

FunctionHead ::= "(" (ParameterList)? ")" (ReturnType)?

FunctionBody ::= FunctionHead Block "end"

Class ::= "class" Name (":" Name ("," Name)*)? ClassBody

ClassBody ::= (Property | Default | Function)* "end"

Property ::= "property" TypedName ("=" Expression)?

Default ::= "default" Name "=" Expression

Enum ::= "enum" EnumBody

EnumCase ::= Name ("(" (Name ":")? Type ")")? ("=" Expression)?

EnumBody ::= EnumCase ("," EnumCase)* "end"

Protocol ::= "protocol" Name (":" Name ("," Name)*)? ProtocolBody

ProtocolProperty ::= "property" TypedName

ProtocolFunction ::= "function" FunctionHead

ProtocolBody ::= (ProtocolProperty | ProtocolFunction)* "end"

TableConstructor ::= "{" (FieldList)? "}"

FieldList ::= Field (FieldSeparator Field)* (FieldSeparator)?

Field ::= "[" Expression "]" "=" Expression |
  Name "=" Expression | Expression

FieldSeparator ::= "," | ";"

BinaryOperator ::= "+=" | "-=" | "*=" | "/=" | "%=" |
  "+" | "-" | "*" | "/" | 
  "^" | "%" | ".." |
  "<" | "<=" | ">" | ">=" |
  "==" | "~=" |
  "and" | "or"

PreUnaryOperator ::= "-" | "not" | "#"

PostUnaryOperator ::= "++" | "--"